/*
 fusio
 Copyright (C) 2015-2016 Christoph Kappestein
 License: AGPLv3
*/
"use strict";var fusioApp=angular.module("fusioApp",["ngRoute","ngSanitize","ui.bootstrap","ui.gravatar","satellizer","noCAPTCHA","fusioApp.account.app.developer","fusioApp.account.app.grant","fusioApp.account.profile","fusioApp.account.security","fusioApp.api","fusioApp.auth","fusioApp.documentation","fusioApp.login","fusioApp.logout","fusioApp.overview","fusioApp.signup"]);fusioApp.value("version","v0.2"),fusioApp.provider("fusio",function(){var baseUrl=null,documentationMenu=null;this.setBaseUrl=function(_baseUrl){baseUrl=_baseUrl},this.getBaseUrl=function(){return baseUrl},this.setDocumentationMenu=function(_documentationMenu){documentationMenu=_documentationMenu},this.getDocumentationMenu=function(){return documentationMenu},this.guessFusioEndpointUrl=function(urlRewrite){for(var url=window.location.href,removePart=function(url,sign){var count=(url.match(/\//g)||[]).length,pos=url.lastIndexOf(sign);return count>2&&-1!==pos?url.substring(0,pos):url},parts=["#","?","/","/"],i=0;i<parts.length;i++)url=removePart(url,parts[i]);return url+(urlRewrite?"/":"/index.php/")},this.$get=function(){return null===baseUrl&&"undefined"!=typeof fusio_url?baseUrl=fusio_url:null===baseUrl&&(baseUrl=this.guessFusioEndpointUrl(!1)),{baseUrl:baseUrl,documentationMenu:documentationMenu}}}),fusioApp.config(["$routeProvider",function($routeProvider){$routeProvider.otherwise({redirectTo:"/"})}]),fusioApp.config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0)}]),fusioApp.factory("fusioAuthenticate",["SatellizerShared",function($auth){return{request:function(request){if($auth.isAuthenticated()){var payload=$auth.getPayload();payload&&payload.sub&&(request.headers.Authorization="Bearer "+payload.sub)}return request}}}]),fusioApp.config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push("fusioAuthenticate")}]),fusioApp.run(function($rootScope,$window,$location,$http,$auth,version){$rootScope.isAuthenticated=$auth.isAuthenticated(),$rootScope.userName=null;var payload=$auth.getPayload();payload&&payload.name&&($rootScope.userName=payload.name),$rootScope.version=version}),angular.module("fusioApp.account.app.developer",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/account/app/developer",{templateUrl:"app/account/app/developer/developer.html",controller:"AccountAppDeveloperCtrl"})}]).controller("AccountAppDeveloperCtrl",["$scope","$http","$uibModal","$auth","$location","fusio",function($scope,$http,$uibModal,$auth,$location,fusio){return $scope.apps=[],$auth.isAuthenticated()?($scope.load=function(){$http.get(fusio.baseUrl+"consumer/app/developer").then(function(response){$scope.apps=response.data.entry})},$scope.createApp=function(){var modalInstance=$uibModal.open({size:"md",backdrop:"static",templateUrl:"app/account/app/developer/create.html",controller:"AccountAppDeveloperCreateCtrl"});modalInstance.result.then(function(){$scope.load()},function(){})},$scope.showApp=function(app){$uibModal.open({size:"md",backdrop:"static",templateUrl:"app/account/app/developer/detail.html",controller:"AccountAppDeveloperDetailCtrl",resolve:{app:function(){return app}}})},$scope.deleteApp=function(app){confirm("Do you really want to delete the app?")&&$http["delete"](fusio.baseUrl+"consumer/app/developer/"+app.id).then(function(){$scope.load()})},void $scope.load()):void $location.path("/login")}]).controller("AccountAppDeveloperCreateCtrl",["$scope","$http","$uibModalInstance","fusio",function($scope,$http,$uibModalInstance,fusio){$scope.app={name:"",url:"",scopes:[]},$scope.scopes=[],$http.get(fusio.baseUrl+"consumer/scope").then(function(response){$scope.scopes=response.data.entry}),$scope.create=function(app){var data=angular.copy(app);data.scopes&&angular.isArray(data.scopes)&&(data.scopes=data.scopes.filter(function(value){return null!==value&&void 0!==value})),$http.post(fusio.baseUrl+"consumer/app/developer",data).then(function(response){$scope.response=response.data,response.data.success===!0&&$uibModalInstance.close()},function(response){$scope.response=response.data})},$scope.close=function(){$uibModalInstance.dismiss("cancel")},$scope.closeResponse=function(){$scope.response=null}}]).controller("AccountAppDeveloperDetailCtrl",["$scope","$http","$uibModalInstance","app","fusio",function($scope,$http,$uibModalInstance,app,fusio){$scope.app=app,$http.get(fusio.baseUrl+"consumer/app/developer/"+app.id).then(function(response){$scope.app=response.data}),$scope.close=function(){$uibModalInstance.dismiss("cancel")}}]),angular.module("fusioApp.account.app.grant",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/account/app/grant",{templateUrl:"app/account/app/grant/grant.html",controller:"AccountAppGrantCtrl"})}]).controller("AccountAppGrantCtrl",["$scope","$http","$uibModal","$auth","$location","fusio",function($scope,$http,$uibModal,$auth,$location,fusio){return $scope.grants=[],$auth.isAuthenticated()?void $http.get(fusio.baseUrl+"consumer/app/grant").then(function(response){$scope.grants=response.data.entry}):void $location.path("/login")}]),angular.module("fusioApp.account.profile",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/account",{templateUrl:"app/account/profile/profile.html",controller:"AccountProfileCtrl"})}]).controller("AccountProfileCtrl",["$scope","$http","$uibModal","$auth","$location","fusio",function($scope,$http,$uibModal,$auth,$location,fusio){return $scope.account={},$scope.email=null,$auth.isAuthenticated()?($scope.update=function(account){$http.put(fusio.baseUrl+"consumer/account",account).then(function(response){$scope.response=response.data,$scope.load()})},$scope.closeResponse=function(){$scope.response=null},$scope.load=function(){$http.get(fusio.baseUrl+"consumer/account").then(function(response){$scope.account=response.data,response.data.email&&($scope.email=response.data.email)},function(response){$scope.response=response.data})},void $scope.load()):void $location.path("/login")}]),angular.module("fusioApp.account.security",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/account/security",{templateUrl:"app/account/security/security.html",controller:"AccountSecurityCtrl"})}]).controller("AccountSecurityCtrl",["$scope","$http","$uibModal","$auth","$location","fusio",function($scope,$http,$uibModal,$auth,$location,fusio){return $scope.account={},$auth.isAuthenticated()?($scope.update=function(account){$http.put(fusio.baseUrl+"consumer/account/change_password",account).then(function(response){$scope.response=response.data},function(response){$scope.response=response.data})},void($scope.closeResponse=function(){$scope.response=null})):void $location.path("/login")}]),angular.module("fusioApp.api",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/api",{templateUrl:"app/api/api.html",controller:"ApiCtrl"}),$routeProvider.when("/api/:path*",{templateUrl:"app/api/api.html",controller:"ApiCtrl"})}]).controller("ApiCtrl",["$scope","$auth","$location","$http","$compile","$sce","$routeParams","fusio","routings","schema",function($scope,$auth,$location,$http,$compile,$sce,$routeParams,fusio,routings,schema){$scope.routings=[],$scope.api=null,$scope.methods={},$scope.loadRoutings=function(){routings.getRoutings().then(function(result){$scope.routings=result,!$routeParams.path&&result[0].path&&$scope.loadDetails(result[0].path)})},$scope.loadDetails=function(path){$http.get(fusio.baseUrl+"doc/*/"+path).then(function(response){if($scope.api=response.data,$scope.api.methods){var methods={};for(var methodName in $scope.api.methods)if($scope.api.methods.hasOwnProperty(methodName)){var schema=$scope.getSchema(methodName,$scope.api.methods[methodName]);schema||(schema='<br><div class="alert alert-info">This API method provides no schema informations.</div>'),methods[methodName]=schema}$scope.methods=methods}})},$scope.getSchema=function(methodName,method){var apiSchema=schema.create($scope.api);return apiSchema.getHtml(methodName,method)},$scope.loadRoutings(),$routeParams.path&&$scope.loadDetails($routeParams.path)}]).service("routings",["$http","$q","fusio",function($http,$q,fusio){var routings=null,excludePaths=["/consumer/","/backend/"];this.getRoutings=function(){return $q(null===routings?function(resolve,reject){$http.get(fusio.baseUrl+"doc").then(function(response){var data=response.data.routings;if(routings=[],angular.isArray(data))for(var i=0;i<data.length;i++){var found=!1;"/"===data[i].path&&(found=!0);for(var j=0;j<excludePaths.length;j++)if(0===data[i].path.indexOf(excludePaths[j])){found=!0;break}found||routings.push(data[i])}resolve(routings)},function(){reject()})}:function(resolve){resolve(routings)})}}]).service("schema",function(){function SchemaGenerator(definition){this.definition=definition,this.schema=definition.schema,this.getHtml=function(methodName,method){var html='<div class="fusio-endpoint-method">',isEmpty=!0,request=this.getRequest(method);request&&(isEmpty=!1,html+="<h3>"+methodName+" Request</h3>",html+='<div class="fusio-endpoint-schema fusio-endpoint-schema-request">'+request+"</div>");for(var statusCodes=this.getAvailableResponseCodes(method),i=0;i<statusCodes.length;i++){var response=this.getResponse(method,statusCodes[i]);response&&(isEmpty=!1,html+="<h3>"+methodName+" Response - "+statusCodes[i]+"</h3>",html+='<div class="fusio-endpoint-schema fusio-endpoint-schema-response">'+response+"</div>")}return html+="</div>",isEmpty?null:html},this.getJsonSampleRequest=function(method){return this.getRequest(method,"json")},this.getRequest=function(method,format){if(method&&method.request){var data=this.getPointer(method.request);if(data)return this.transformSchema(data,format)}return null},this.getResponse=function(method,statusCode,format){if(method&&method.responses&&method.responses[statusCode]){var data=this.getPointer(method.responses[statusCode]);if(data)return this.transformSchema(data,format)}return null},this.getAvailableResponseCodes=function(method){var codes=[];if(method&&method.responses)for(var statusCode in method.responses)method.responses.hasOwnProperty(statusCode)&&codes.push(statusCode);return codes},this.getPointer=function(path){if(!path)return null;"#/"==path.substring(0,2)&&(path=path.substring(2));for(var parts=path.split("/"),el=this.schema,i=0;i<parts.length&&el[parts[i]];i++)el=el[parts[i]];return el},this.resolveRef=function(schema){return schema.$ref&&(schema=this.resolveRef(this.getPointer(schema.$ref))),schema},this.transformSchema=function(schema,format){return"json"==format?this.buildJsonObject(this.resolveRef(schema)):this.buildHtmlObject(this.resolveRef(schema))},this.buildHtmlObject=function(schema){var html="";if(schema.properties){var references=[],title="Object";schema.title&&(title=schema.title),html+="<h4>"+title+"</h4>",schema.description&&(html+="<p>"+schema.description+"</p>"),html+='<table class="table">',html+="<colgroup>",html+='    <col width="20%">',html+='    <col width="20%">',html+='    <col width="40%">',html+='    <col width="20%">',html+="</colgroup>",html+="<thead>",html+="<tr>",html+="    <th>Property</th>",html+="    <th>Type</th>",html+="    <th>Description</th>",html+="    <th>Constraints</th>",html+="</tr>",html+="</thead>",html+="<tbody>";for(var propertyName in schema.properties)if(schema.properties.hasOwnProperty(propertyName)){var object,property=schema.properties[propertyName];property.$ref&&(property=this.resolveRef(property));var type=property.type?property.type:"string";"object"===type?(object=this.resolveRef(property),object.title&&(type=object.title),references.push(object)):"array"===type&&property.items&&(object=this.resolveRef(property.items),"object"===object.type?(type=object.title?"array&lt;"+object.title+"&gt;":"array&lt;object&gt;",references.push(object)):object.type&&(type="array&lt;"+object.type+"&gt;"));var required=!1;if(angular.isArray(schema.required))for(var j=0;j<schema.required.length;j++)if(schema.required[j]===propertyName){required=!0;break}html+="<tr>",html+=required?'<td><span class="fusio-property fusio-property-required" title="required">'+propertyName+"</span></td>":'<td><span class="fusio-property">'+propertyName+"</span></td>",html+="<td>"+type+"</td>",html+="<td>"+(property.description?property.description:"")+"</td>",html+="<td>"+this.buildConstraints(property)+"</td>",html+="</tr>"}html+="</tbody>",html+="</table>";for(var i=0;i<references.length;i++)html+=this.buildHtmlObject(references[i])}return html},this.buildConstraints=function(property){var html="<dl>";return property.pattern&&(html+="<dt>Pattern:</dt><dd>"+property.pattern+"</dd>"),property["enum"]&&angular.isArray(property["enum"])&&(html+="<dt>Enumeration:</dt><dd>"+property["enum"].join(", ")+"</dd>"),property.minLength&&(html+="<dt>Min-Length:</dt><dd>"+property.minLength+"</dd>"),property.maxLength&&(html+="<dt>Max-Length:</dt><dd>"+property.maxLength+"</dd>"),property.minimum&&(html+="<dt>Minimum:</dt><dd>"+property.minimum+"</dd>"),property.maximum&&(html+="<dt>Maximum:</dt><dd>"+property.maximum+"</dd>"),html+="</dl>"},this.buildJsonObject=function(schema){var data={};if(schema.properties)for(var propertyName in schema.properties)if(schema.properties.hasOwnProperty(propertyName)){var object,property=schema.properties[propertyName];property.$ref&&(property=this.resolveRef(property));var type=property.type?property.type:"string";if("object"===type)object=this.resolveRef(property),data[propertyName]=this.buildJsonObject(object);else if("array"===type){var result=[];property.items&&(object=this.resolveRef(property.items),result.push("object"===object.type?this.buildJsonObject(object):"")),data[propertyName]=result}else data[propertyName]="integer"===type?0:"number"===type?0:"null"===type?null:"boolean"===type?!1:""}return data}}this.create=function(definition){return new SchemaGenerator(definition)}}),angular.module("fusioApp.auth",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/auth",{templateUrl:"app/auth/grant.html",controller:"AuthCtrl"})}]).controller("AuthCtrl",["$scope","$http","$auth","$location","$window","fusio",function($scope,$http,$auth,$location,$window,fusio){var params=$location.search(),responseType=params.response_type,clientId=params.client_id,redirectUri=params.redirect_uri,scope=params.scope,state=params.state;if("token"!=responseType&&"code"!=responseType)$scope.error="Invalid response type";else if(clientId)if(scope){if(!$auth.isAuthenticated()){var data={responseType:responseType,clientId:clientId,redirectUri:redirectUri,scope:scope,state:state},auth=btoa(JSON.stringify(data));return void $location.url("/login?auth="+auth)}$http.get(fusio.baseUrl+"consumer/app/meta?client_id="+encodeURIComponent(clientId)+"&scope="+encodeURIComponent(scope)).then(function(response){$scope.app=response.data},function(){$scope.error="Could not request app informations"})}else $scope.error="Scope missing";else $scope.error="Client id missing";$scope.submitAccess=function(allow){var data={responseType:responseType,clientId:clientId,redirectUri:redirectUri,scope:scope,state:state,allow:allow};$scope.error=null,$scope.info=null,$http.post(fusio.baseUrl+"consumer/authorize",data).then(function(response){""===response.data.redirectUri||"#"==response.data.redirectUri?(0===allow&&($scope.info="The access was denied. There is nothing more todo here."),$scope.response=response.data):$window.location.href=response.data.redirectUri},function(response){$scope.error=response.data.message})}}]),angular.module("fusioApp.documentation",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/documentation/:doc?",{templateUrl:"app/documentation/documentation.html",controller:"DocumentationCtrl"})}]).controller("DocumentationCtrl",["$scope","$auth","$location","$http","$routeParams","fusio",function($scope,$auth,$location,$http,$routeParams,fusio){if($scope.menu=fusio.documentationMenu,$scope.content=null,$scope.loadDoc=function(href){$http.get("docs/"+href+".htm").then(function(response){$scope.content=response.data},function(){$scope.content="Could not load document"})},$scope.getFirstObjectValue=function(object){if(angular.isObject(object)){var key=Object.keys(object)[0];return object[key]?object[key]:null}return null},$routeParams.doc)$scope.loadDoc($routeParams.doc);else{var group=$scope.getFirstObjectValue($scope.menu),href=$scope.getFirstObjectValue(group);$scope.loadDoc(href)}}]),angular.module("fusioApp.login",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/login",{templateUrl:"app/login/login.html",controller:"LoginCtrl"})}]).controller("LoginCtrl",["$scope","$http","$auth","$location","$route","$rootScope","SatellizerConfig",function($scope,$http,$auth,$location,$route,$rootScope,SatellizerConfig){return $scope.user={username:"",password:""},$auth.isAuthenticated()?void $location.path("/profile"):($scope.authenticate=function(provider){$auth.authenticate(provider)},$scope.isConfigured=function(provider){return SatellizerConfig.providers[provider]&&SatellizerConfig.providers[provider].clientId},$scope.closeResponse=function(){$scope.response=null},void($scope.login=function(user){$auth.login(JSON.stringify(user)).then(function(){$rootScope.isAuthenticated=$auth.isAuthenticated(),$rootScope.userName=null;var payload=$auth.getPayload();payload&&payload.name&&($rootScope.userName=payload.name);var params=$location.search();if(params&&params.auth){var allowedParams={responseType:"response_type",clientId:"client_id",redirectUri:"redirect_uri",scope:"scope",state:"state"},data=JSON.parse(atob(params.auth)),parts=[];for(var key in allowedParams)data[key]&&parts.push(allowedParams[key]+"="+encodeURIComponent(data[key]));$location.url("/auth?"+parts.join("&"))}else $route.reload()})["catch"](function(response){$scope.user.password="",$scope.response=response.data})}))}]),angular.module("fusioApp.logout",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/logout",{templateUrl:"app/logout/logout.html",controller:"LogoutCtrl"})}]).controller("LogoutCtrl",["$scope","$auth","$location","$rootScope",function($scope,$auth,$location,$rootScope){$auth.isAuthenticated()&&($auth.logout(),$rootScope.isAuthenticated=$auth.isAuthenticated(),$rootScope.userName=null),$location.url("/login")}]),angular.module("fusioApp.overview",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/",{templateUrl:"app/overview/overview.html",controller:"OverviewCtrl"})}]).controller("OverviewCtrl",["$scope","$auth","$location",function(){}]),angular.module("fusioApp.signup",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/signup",{templateUrl:"app/signup/signup.html",controller:"SignupCtrl"})}]).controller("SignupCtrl",["$scope","$http","$auth","fusio",function($scope,$http,$auth,fusio){$scope.user={name:"",email:"",password:"",passwordRepeat:"",captcha:""},$scope.register=function(user){var data=angular.copy(user);delete data.passwordRepeat,$http.post(fusio.baseUrl+"consumer/register",data).success(function(data){$scope.response=data}).error(function(data){$scope.user.password="",$scope.user.passwordRepeat="",$scope.response=data})},$scope.closeResponse=function(){$scope.response=null}}]);